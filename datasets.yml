- id: travel-sample
  name: Travel Sample
  description: |-
    The classic Travel Sample. Note that all your queries will be scoped to the "inventory" scope, so you can use
    e.g. "SELECT * FROM airport" rather than "SELECT * FROM `travel-sample` WHERE type = 'airport'".
  keyspace: travel-sample.inventory
  queries:

    - id: countries-with-airports
      name: Countries With Airports
      challenge: |-
        Find the 10 countries with the most airports. Include the name of the country and the number of airports.
      points: 5
      query: |-
        SELECT country, count(country) AS count
        FROM airport
        GROUP BY country
        ORDER BY count DESC
        LIMIT 10
      hints:
        - You'll need to use a GROUP BY.

    - id: uk-airports
      name: UK Airports
      challenge: |-
        Find the names of all airports in the UK, in alphabetical order.
      points: 10
      query: |-
        SELECT RAW airportname FROM airport
        WHERE country = "United Kingdom"
        AND airportname NOT IN ["London St Pancras", "Waterloo International", "All Airports"]
        AND airportname NOT LIKE "%Station"
        ORDER BY airportname
      hints:
        - The question asks for just the airport name - you may need to use SELECT RAW.
        - The data is messy and includes some railway stations as well as airports.
        - '"All Airports" is not an airport.'

    - id: london-hotels
      name: Best London Hotels
      challenge: |-
        Find all hotels in London, in order of average overall rating (across all reviews for that hotel), highest to
        lowest. Include the name of the hotel and the average overall rating, leaving hotels with no reviews at the end.
        If multiple hotels have the same average rating, return them in alphabetical order.
      points: 15
      query: |-
        SELECT name, ARRAY_AVG(ARRAY r.ratings.Overall FOR r IN t.reviews END) AS ratings_overall
        FROM hotel AS t
        WHERE t.city = "London"
        ORDER BY ratings_overall DESC NULLS LAST, name
      hints:
        - You could use either the AVG function with a subquery, or the ARRAY_AVG function with an array range transformation expression.
        - ORDER BY takes a parameter to control where null values get placed in the sort order.

    - id: late-fliers
      name: Late Fliers
      challenge: |-
        Find the names of all the cities that can be reached from San Francisco Airport on flights scheduled to depart
        between 10pm and 6am (Pacific Time), in alphabetical order. Ensure each city only appears once.
      points: 20
      query: |-
        SELECT RAW a.city
        FROM `travel-sample`.inventory.route r
        JOIN `travel-sample`.inventory.airport a ON r.destinationairport = a.faa
        WHERE r.sourceairport = "SFO"
        AND ARRAY_LENGTH((
          SELECT s.*
          FROM r.schedule s
          WHERE s.utc >= "05:00:00"
          AND s.utc < "13:00:00"
          ORDER BY s.utc)) > 0
        GROUP BY a.city
        ORDER BY a.city
      hints:
        - 10pm and 6am Pacific Time are 05:00 and 13:00 UTC respectively.
        - San Francisco Airport's FAA/ICAO code is SFO.
        - This is doable with one JOIN and one ARRAY_LENGTH subquery - you can filter on `route.sourceairport` to narrow down the list of routes to consider.

    - id: departure-board
      name: Departure Board
      challenge: |-
        Find the departure time and IATA code of the destination airport of the next 25 flights departing from London Heathrow.
        If two flights depart at the same time, sort them by the destination airport code.
      points: 25
      query: |-
        select s.utc, r.destinationairport from route r
        unnest r.schedule s
        where r.sourceairport = "LHR"
        and s.day = date_part_str(now_utc(), "dow")
        and s.utc > NOW_STR("hh:mm:ss")
        order by s.utc, r.destinationairport
        limit 25

- id: tfgm
  name: Transport for Greater Manchester
  description: |-
    All trams and buses in Greater Manchester.
    Based on the source data in GTFS format. More information about GTFS at https://developers.google.com/transit/gtfs.
    Each file in the GTFS archive has been converted to a collection, e.g. routes.txt is the `routes` collection.
    All column names are preserved exactly as document keys.
  keyspace: tfgm._default
  queries:

    - id: tram-lines
      name: Tram Lines
      challenge: |-
        Find the details of all tram lines, ordered by the route ID.
      points: 10
      query: |-
        SELECT RAW r FROM routes r WHERE r.agency_id = "METL"
        AND route_short_name NOT LIKE "%Bus Replacement" ORDER BY r.route_id
      hints:
        - The data contains tram replacement buses - you'll need to exclude these.
        - The Metrolink agency ID is METL.

    - id: schedule
      name: Tram Schehdule
      challenge: |-
        Find the schedule of today's 14:50 East Didsbury to Rochdale tram. Include the name of each stop, the scheduled departure time,
        as well as the journey time from the previous stop in minutes.
      points: 30
      query: |-
        SELECT stops.stop_name,
          stop_times.departure_time,
          (STR_TO_MILLIS(stop_times.arrival_time) - STR_TO_MILLIS(LAG(stop_times.departure_time) OVER (
                     ORDER BY stop_times.stop_sequence))) /60/1000 AS travel_time
        FROM stop_times
        INNER JOIN stops ON stop_times.stop_id = stops.stop_id
        WHERE stop_times.trip_id = "METLPINK:005MF7MF:I:100:CURRENT"
        ORDER BY stop_times.stop_sequence
      hints:
        - You'll need to use a window function to find the journey times. STR_TO_MILLIS can parse the time into a number.
        - Don't try to complete the entire challenge in one query. For example you could find the trip ID in one query and use it later in another.

    - id: departure-board
      name: Take Me Home, Metrolink
      challenge: |-
        Find the next 10 departures from the three closest tram stops to the Couchbase Manchester office (as the crow flies from the front door).
        Include the departure time, stop name, and destination of the tram. Order by departure time.
      points: 40
      query: |-
        SELECT stop_times.departure_time,
          stops.stop_name,
          trips.trip_headsign
        FROM stop_times
          JOIN trips ON trips.trip_id = stop_times.trip_id
          JOIN stops ON stop_times.stop_id = stops.stop_id
        WHERE stop_times.arrival_time > NOW_STR("hh:mm:ss")
          AND stop_times.arrival_time < MILLIS_TO_STR(NOW_MILLIS() + 15 * 60 * 1000, "hh:mm:ss")
          AND stop_times.trip_id LIKE "%MF%"
          AND (stops.stop_name LIKE "Piccadilly%"
            OR stops.stop_name LIKE "Market Street%")
          AND stops.stop_name LIKE "%Metrolink)"
        ORDER BY stop_times.arrival_time
        LIMIT 10
      hints:
        - "The three closest stops are Piccadilly Gardens, Market Street, and Piccadilly."
        - You may need to use at least two JOIN statements.
        - The dataset includes separate schedules for Mondays-Fridays and Saturdays-Sundays. Make sure you use the right one.

#    - id: far-away-bus-stops
#      name: Far-Away Bus Stops
#      challenge: |-
#        Find the details of all bus stops more than 20 miles from Piccadilly Gardens, in order of the distance as the crow flies.
#      points: 70
#      query: |-
#        SELECT stops.*, d
#        FROM stops
#        let lat1 = 53.480278,
#        lon1 = -2.2375,
#        a = power(sin(radians(stop_lat - lat1)/2), 2) + cos(radians(lat1))*cos(radians(stop_lat)) * power(sin(radians(stop_lon - lon1)), 2),
#        c = 2 * atan2(sqrt(a), sqrt(1-a)),
#        d = 6371e3 * c
#        where d > 20000
#        order by d

- id: f1
  name: Formula 1
  description: |-
    Results of all [most] F1 races, including lap-by-lap timings since 1996. Originally sourced from http://ergast.com/mrd/,
    converted into JSON. Data up to date as of the 2022 Hungarian Grand Prix.
  keyspace: f1._default
  queries:

    - id: avg-races
      name: Average Races
      challenge: |-
        Find the average number of races per year. Return just the number (no object wrapping it).
      points: 10
      query: |-
        with years as (select year, count(year) as count from _default group by year)
        select raw avg(years.count) from years
      hints:
        - Trying to do "SELECT AVG(COUNT(...))" won't work - consider a common table expression or subquery.

    - id: ricciardo-last
      name: Danny Ric's Last Win
      challenge: |-
        Find the date of the last race that Daniel Ricciardo won.
      points: 15
      query: |-
        SELECT RAW r.date FROM _default r
        WHERE ANY res IN r.results SATISFIES res.driver.DriverRef = "ricciardo" AND res.position = 1 END
        ORDER BY r.date DESC
        LIMIT 1
      hints:
        -

    - id: last-winners
      name: Race Winners
      challenge: |-
        Find the names of the last 10 people to win a F1 race, along with the date of the last race they won, latest to oldest.
      points: 20
      query: |-
        SELECT winner, MAX(r.date) AS date FROM _default r
        LET winner = FIRST res.driver.Forename || " " || res.driver.Surname FOR res IN r.results WHEN res.position = 1 END
        WHERE ARRAY_LENGTH(r.results) > 0
        GROUP BY winner
        ORDER BY date desc
        LIMIT 10
      hints:
        - To get the driver's full name, use `r.driver.Forename || " " || r.driver.Surname` (where `r` is your collection alias).
        - The dataset includes records for races that haven't happened yet, and thus have no results. You'll need to filter those out.
        - The question asks for the last 10 people, not the last 10 races - you'll need to use a GROUP BY.

    - id: monza-record
      name: Monza Lap Record
      challenge: |-
        Find the fastest lap ever done around the Autodromo Nazionale di Monza, along with the date of the race and the surname of the driver to set it.
        Return the lap time in the format "<m>m<s>s.<ms>", where <m/s/ms> are the minutes, seconds, and milliseconds.
      points: 20
      query: |-
        select l.driver.Surname as surname, duration_to_str(l.time_millis * 1000 * 1000) as time, r.date from _default r
        unnest array_flatten(r.lap_times, 1) l
        where r.circuit.circuitRef = "monza"
        order by l.time_millis
        limit 1
      hints:
        - The lap_times field is structured as a nested array, where each outer array is one lap and each object in the inner array is one driver's time.
        - The ARRAY_FLATTEN function in conjunction with UNNEST may be useful.
        - ORDER BY time might not work right because N1QL sorts alphabetically, try time_millis instead.
        - The DURATION_TO_STR function will output the duration in the right format automatically, though pay attention to the units.

    - id: commentator-last-races
      name: Driver to Commentator
      challenge: |-
        Find the date of the last race of each of Sky Sports F1's commentators
        (David Croft, Martin Brundle, Paul di Resta, Ted Kravitz, Anthony Davidson, Karun Chandhok, Johnny Herbert,
        Damon Hill, Jenson Button, Nico Rosberg), in alphabetical order of their first names.
      points: 30
      query: |-
        SELECT name,
               MAX(d.date) AS date
        FROM _default d
        UNNEST d.results r
        LET name = (r.driver.Forename || " " || r.driver.Surname)
        WHERE name IN ["Martin Brundle", "Paul di Resta", "Anthony Davidson", "Karun Chandhok", "Johnny Herbert", "Damon Hill", "Jenson Button", "Nico Rosberg"]
        GROUP BY name
        ORDER BY name
      hints:
        - Not all of the commentators have actually driven in F1.
        - You can use `WHERE name IN ["foo", "bar"]` to avoid having to write 10 WHERE/AND clauses.
        - UNNEST may be helpful.

    - id: bahrain-delta
      name: Fastest-Slowest
      challenge: |-
        Find the driver who had the biggest difference between the times of their fastest and slowest lap at the 2021
        Bahrain Grand Prix. Include the driver's surname, the fastest and slowest lap times, and the difference between
        the two in miliseconds
      points: 60
      query: |-
        WITH bylap AS (
            SELECT RAW ARRAY {"lap": lap, "data": data} FOR lap:data IN lt END
            FROM (
                SELECT RAW lap_times
                FROM _default
                WHERE year = 2021
                    AND circuit.circuitRef = "bahrain")AS lt)
        SELECT data.driver.Surname AS surname,
               MAX(data.time) AS slowest,
               MIN(data.time) AS fastest,
               MAX(data.time_millis) - MIN(data.time_millis) AS delta
        FROM ARRAY_FLATTEN(bylap, 1) bl
        UNNEST bl.data data
        GROUP BY data.driver.Surname
        ORDER BY delta DESC
        LIMIT 1
